#!/bin/env bash

source ./.env.base

if [ -f "./.env.custom.local" ]; then
  source ./.env.custom.local
fi

if [ "$1" == "vertica" ]; then
  export MELTANO_TARGET="target-vertica"
  export DBT_TARGET="vertica"
  export DB_HOST="localhost"
  export DB_PORT=5433
  export DB_USER="demouser"
  export DB_PASS=demopass
  export DB_NAME=vmart
elif [ "$1" == "motherduck" ]; then
  export MELTANO_TARGET="target-duckdb"
  export DBT_TARGET="motherduck"
  export DB_NAME=cicd_dev
  export DBT_INCREMENTAL_STRATEGY="delete+insert"
  # No DB endpoint props, they are embedded in DuckDB driver
else
  export MELTANO_TARGET="target-postgres"
  export DBT_TARGET="postgres"
  # TODO - once we can bump dbt version to 1.6, merge strategy will work for all DBs
  export DBT_INCREMENTAL_STRATEGY="delete+insert"
  export DB_HOST="localhost"
  export DB_PORT=5432
  export DB_USER="demouser"
  export DB_PASS=demopass
  export DB_NAME=demo
fi

export ELT_ENVIRONMENT="cicd_dev_local"

# Meltano uses local Minio instead of AWS S3
export MELTANO_STATE_AWS_ACCESS_KEY_ID="minio_abcde_k1234567"
export MELTANO_STATE_AWS_SECRET_ACCESS_KEY="minio_abcde_k1234567_secret1234567890123"
export MELTANO_STATE_AWS_BUCKET="meltano"
export MELTANO_STATE_AWS_ENDPOINT="http://localhost:19000"

# Gitlab (for testing sending messages to merge requests)
export CI_MERGE_REQUEST_PROJECT_ID=37824613
export CI_MERGE_REQUEST_IID=1
# GitHub (for testing sending messages to pull requests)
# GitHub is preferred over Gitlab in Python SDK. Unset GitHub variables to test Gitlab.
export GITHUB_REPOSITORY="jaceksan/gooddata-data-pipeline"
export GITHUB_REF_NAME="24/merge"
export GITHUB_ACTOR="jaceksan"
# Set it to a commit SHA which you want to test in dbt Cloud
export GOODDATA_GITHUB_SHA=""

# Prefix DB related vars with DBT_
source ./.env.prefix_dbt_vars

# GoodData
export GOODDATA_PROFILES="local"
export GOODDATA_ENVIRONMENT_ID="development"
unset GOODDATA_UPPER_CASE
